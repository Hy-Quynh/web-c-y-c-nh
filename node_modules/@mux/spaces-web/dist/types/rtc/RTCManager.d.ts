/// <reference types="node" />
import { EventEmitter } from 'events';
import { WSSignalClient } from '../api/SignalClient';
import { LocalTrack } from '../track/LocalTrack';
import { SpaceOptions } from '../space/options';
import { ParticipantRole } from '../participant/enums';
interface JoinResponse {
    sessionId: string;
    connectionId: string;
    participantId: string;
    broadcasting: boolean;
}
/**
 * RTCManager is in charge of managing all RTC related events
 * and state
 *
 * @noInheritDoc
 */
export declare class RTCManager extends EventEmitter {
    client: WSSignalClient;
    private pub?;
    private subSfus;
    private candidates;
    trackIdToConnId: Map<string, string>;
    private sessionId?;
    private connectionId?;
    private participantId?;
    private spaceId;
    private iceServers;
    private options;
    private role;
    constructor(spaceId: string, role: ParticipantRole, options?: SpaceOptions);
    connect(jwt: string): Promise<JoinResponse>;
    private convertIceServers;
    private offerOrCreateSub;
    private onMediaTrackAdded;
    publishTracks(tracks: LocalTrack[]): void;
    unpublishAllTracks(): Promise<void>;
    updateTrack(track: LocalTrack, oldId: string): void;
    unpublishTracks(tracks: LocalTrack[]): void;
    unpublishTrack(track: LocalTrack): void;
    close(): void;
}
export {};
