import { LocalTrack } from '../track/LocalTrack';
import { BroadcastState } from '../space/enums';
import { WSJoinResponse, SfuDescription } from './types';
export declare class WSSignalClient {
    onOffer?: (sd: SfuDescription) => void;
    onTrackAdded?: (track: any) => void;
    onTrackRemoved?: (track: any) => void;
    onCandidate?: (candidate: any, type: any, id: string) => void;
    onParticipantJoined?: (participant: any) => void;
    onParticipantLeft?: (participantId: any) => void;
    onAnswer?: (sdp: any) => void;
    onTrackMute?: (connectionId: string, trackId: string) => void;
    onTrackUnmute?: (connectionId: string, trackId: string) => void;
    onActiveSpeakers?: (tracks: {
        connectionId: string;
        trackId: string;
    }[]) => void;
    onBroadcastStateUpdate?: (state: BroadcastState) => void;
    onClose?: (reason: string) => void;
    joinResolver: any;
    joinRejector: any;
    private joined;
    ws?: WebSocket;
    connect(jwt: string): Promise<WSJoinResponse>;
    close(): void;
    sendAnswer(sdp: any, id: string): void;
    sendOffer(sdp: any): void;
    sendCandidate(candidate: RTCIceCandidateInit, type: number, id: string): void;
    sendPendingTrack(track: LocalTrack, mid: string): void;
    sendMuteRequest(trackId: string): void;
    sendUnmuteRequest(trackId: string): void;
    sendRequest(req: any): void;
    private sigCandidateToRTCCandidate;
    private rtcCandidateToSigCandidate;
    private handleSignalMessage;
}
